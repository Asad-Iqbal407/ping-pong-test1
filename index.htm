<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ping Pong Mobile & PC Game</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        body, html {
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: #1a1a1a;
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        #gameCanvas {
            background-color: #2c3e50;
            border: 4px solid #ecf0f1;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
            touch-action: none; /* Prevent default touch actions */
            position: relative;
        }
        /* Top and Bottom Borders */
        .border {
            position: absolute;
            left: 0;
            right: 0;
            height: 10px;
            background-color: #ecf0f1;
        }
        .border.top {
            top: 0;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
        }
        .border.bottom {
            bottom: 0;
            border-bottom-left-radius: 15px;
            border-bottom-right-radius: 15px;
        }
        #ui {
            position: absolute;
            top: 20px;
            width: 100%;
            display: flex;
            justify-content: space-around;
            color: #ecf0f1;
            font-size: 28px;
            z-index: 2;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.7);
        }
        #levelDisplay {
            position: absolute;
            top: 60px;
            width: 100%;
            display: flex;
            justify-content: center;
            color: #ecf0f1;
            font-size: 24px;
            z-index: 2;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.7);
        }
        #gameOver {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(44, 62, 80, 0.95);
            color: #ecf0f1;
            padding: 30px 40px;
            border: 3px solid #ecf0f1;
            border-radius: 15px;
            display: none;
            text-align: center;
            box-shadow: 0 0 20px rgba(0,0,0,0.7);
            z-index: 3;
        }
        #gameOver h1 {
            margin-bottom: 20px;
            font-size: 36px;
        }
        #gameOver button {
            margin-top: 20px;
            padding: 12px 25px;
            font-size: 20px;
            border: none;
            border-radius: 8px;
            background-color: #ecf0f1;
            color: #2c3e50;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        #gameOver button:hover {
            background-color: #bdc3c7;
        }
        #startButton {
            position: absolute;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 35px;
            font-size: 22px;
            border: none;
            border-radius: 10px;
            background-color: #27ae60;
            color: #ecf0f1;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            transition: background-color 0.3s, transform 0.2s;
            z-index: 2;
        }
        #startButton:hover {
            background-color: #2ecc71;
            transform: translateX(-50%) scale(1.05);
        }

        /* Responsive Canvas */
        @media (max-width: 700px) {
            #gameCanvas {
                width: 90vw;
                height: 70vh;
            }
        }
    </style>
</head>
<body>
    <div id="ui">
        <div id="playerScore">Player: 0</div>
        <div id="computerScore">Computer: 0</div>
    </div>
    <div id="levelDisplay">Level: 1</div>
    <canvas id="gameCanvas" width="600" height="800"></canvas>
    <button id="startButton">Start Game</button>
    <div id="gameOver">
        <h1 id="gameOverText">You Win!</h1>
        <button onclick="restartGame()">Restart</button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        const playerScoreElem = document.getElementById('playerScore');
        const computerScoreElem = document.getElementById('computerScore');
        const levelDisplay = document.getElementById('levelDisplay');
        const startButton = document.getElementById('startButton');
        const gameOverDiv = document.getElementById('gameOver');
        const gameOverText = document.getElementById('gameOverText');

        const GAME_WIDTH = canvas.width;
        const GAME_HEIGHT = canvas.height;

        const PADDLE_WIDTH = 20;
        const PADDLE_HEIGHT = 120;
        const BALL_RADIUS = 12;

        let playerScore = 0;
        let computerScore = 0;
        const WINNING_SCORE = 5;
        let currentLevel = 1;
        const LEVEL_UP_SCORE = 3; // Score difference to level up

        let gameRunning = false;

        // Paddle Class
        class Paddle {
            constructor(x, y, isPlayer = false) {
                this.x = x;
                this.y = y;
                this.width = PADDLE_WIDTH;
                this.height = PADDLE_HEIGHT;
                this.speed = isPlayer ? 7 : 5; // Player paddle is slightly faster
                this.isPlayer = isPlayer;
                this.moveUp = false;
                this.moveDown = false;
            }

            draw() {
                // Create a gradient for the paddle
                const gradient = ctx.createLinearGradient(this.x, this.y, this.x, this.y + this.height);
                gradient.addColorStop(0, '#2980b9');
                gradient.addColorStop(1, '#6dd5fa');

                ctx.fillStyle = gradient;
                ctx.fillRect(this.x, this.y, this.width, this.height);
            }

            update(ball = null) {
                if (this.isPlayer) {
                    // Player paddle movement handled via touch or keyboard
                    if (this.moveUp) {
                        this.y -= this.speed;
                    }
                    if (this.moveDown) {
                        this.y += this.speed;
                    }
                } else {
                    // Simple AI for computer paddle
                    if (ball.y < this.y + this.height / 2) {
                        this.y -= this.speed;
                    } else {
                        this.y += this.speed;
                    }
                }

                // Prevent paddle from going out of bounds
                if (this.y < 10) this.y = 10; // Considering top border
                if (this.y + this.height > GAME_HEIGHT - 10) this.y = GAME_HEIGHT - 10 - this.height; // Considering bottom border
            }

            moveTo(y) {
                this.y = y - this.height / 2;
                // Prevent paddle from going out of bounds
                if (this.y < 10) this.y = 10;
                if (this.y + this.height > GAME_HEIGHT - 10) this.y = GAME_HEIGHT - 10 - this.height;
            }
        }

        // Ball Class
        class Ball {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.radius = BALL_RADIUS;
                this.baseSpeedX = 6;
                this.baseSpeedY = 6;
                this.speedX = this.baseSpeedX;
                this.speedY = this.baseSpeedY;
                this.maxSpeed = 12;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                const gradient = ctx.createRadialGradient(this.x, this.y, this.radius / 2, this.x, this.y, this.radius);
                gradient.addColorStop(0, '#f39c12');
                gradient.addColorStop(1, '#e74c3c');
                ctx.fillStyle = gradient;
                ctx.fill();
                ctx.closePath();
            }

            reset() {
                this.x = GAME_WIDTH / 2;
                this.y = GAME_HEIGHT / 2;
                // Reset speeds based on current level
                const speedMultiplier = 1 + (currentLevel - 1) * 0.5;
                this.speedX = (Math.random() > 0.5 ? this.baseSpeedX : -this.baseSpeedX) * speedMultiplier;
                this.speedY = (Math.random() * 4 - 2) * speedMultiplier; // Random y speed between -2 and 2 multiplied by speedMultiplier
            }

            update(playerPaddle, computerPaddle) {
                this.x += this.speedX;
                this.y += this.speedY;

                // Top and Bottom Collision
                if (this.y - this.radius < 10) { // Top border
                    this.speedY = Math.abs(this.speedY);
                }
                if (this.y + this.radius > GAME_HEIGHT - 10) { // Bottom border
                    this.speedY = -Math.abs(this.speedY);
                }

                // Collision with Player Paddle
                if (this.x - this.radius < playerPaddle.x + playerPaddle.width &&
                    this.y > playerPaddle.y &&
                    this.y < playerPaddle.y + playerPaddle.height) {
                    this.speedX = Math.abs(this.speedX) + 0.5; // Increase speed slightly
                    // Adjust speedY based on where it hit the paddle
                    let collidePoint = this.y - (playerPaddle.y + playerPaddle.height / 2);
                    collidePoint = collidePoint / (playerPaddle.height / 2);
                    this.speedY = collidePoint * 6;

                    // Level Up Condition
                    if (playerScore - computerScore >= LEVEL_UP_SCORE) {
                        levelUp();
                    }
                }

                // Collision with Computer Paddle
                if (this.x + this.radius > computerPaddle.x &&
                    this.y > computerPaddle.y &&
                    this.y < computerPaddle.y + computerPaddle.height) {
                    this.speedX = -Math.abs(this.speedX) - 0.5; // Increase speed slightly
                    // Adjust speedY based on where it hit the paddle
                    let collidePoint = this.y - (computerPaddle.y + computerPaddle.height / 2);
                    collidePoint = collidePoint / (computerPaddle.height / 2);
                    this.speedY = collidePoint * 6;
                }

                // Scoring
                if (this.x < 0) {
                    computerScore++;
                    updateScore();
                    this.reset();
                }

                if (this.x > GAME_WIDTH) {
                    playerScore++;
                    updateScore();
                    this.reset();
                }
            }
        }

        const playerPaddle = new Paddle(50, GAME_HEIGHT / 2 - PADDLE_HEIGHT / 2, true);
        const computerPaddle = new Paddle(GAME_WIDTH - 50 - PADDLE_WIDTH, GAME_HEIGHT / 2 - PADDLE_HEIGHT / 2);
        const ball = new Ball(GAME_WIDTH / 2, GAME_HEIGHT / 2);

        function updateScore() {
            playerScoreElem.textContent = `Player: ${playerScore}`;
            computerScoreElem.textContent = `Computer: ${computerScore}`;

            // Update Level Display
            levelDisplay.textContent = `Level: ${currentLevel}`;

            // Check for winning condition
            if (playerScore >= WINNING_SCORE) {
                endGame('You Win!');
            } else if (computerScore >= WINNING_SCORE) {
                endGame('Computer Wins!');
            }
        }

        function endGame(message) {
            gameRunning = false;
            gameOverText.textContent = message;
            gameOverDiv.style.display = 'flex';
        }

        function restartGame() {
            playerScore = 0;
            computerScore = 0;
            currentLevel = 1;
            updateScore();
            ball.reset();
            playerPaddle.moveTo(GAME_HEIGHT / 2);
            computerPaddle.moveTo(GAME_HEIGHT / 2);
            gameOverDiv.style.display = 'none';
            gameRunning = false;
            startButton.style.display = 'block';
        }

        function startGame() {
            gameRunning = true;
            startButton.style.display = 'none';
            ball.reset();
            animate();
        }

        // Level Up Function
        function levelUp() {
            currentLevel++;
            // Increase computer paddle speed slightly
            computerPaddle.speed += 1;
            // Reset scores to prevent multiple level ups
            playerScore = 0;
            computerScore = 0;
            updateScore();
        }

        // Handle Touch Controls
        let touchY = null;

        canvas.addEventListener('touchstart', function(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            touchY = touch.clientY - rect.top;
            playerPaddle.moveTo(touchY);
        }, { passive: false });

        canvas.addEventListener('touchmove', function(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            touchY = touch.clientY - rect.top;
            playerPaddle.moveTo(touchY);
        }, { passive: false });

        canvas.addEventListener('touchend', function(e) {
            e.preventDefault();
            touchY = null;
        }, { passive: false });

        // Handle Keyboard Controls for PC Users
        window.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowUp' || e.key === 'w' || e.key === 'W') {
                playerPaddle.moveUp = true;
            } else if (e.key === 'ArrowDown' || e.key === 's' || e.key === 'S') {
                playerPaddle.moveDown = true;
            }
        });

        window.addEventListener('keyup', function(e) {
            if (e.key === 'ArrowUp' || e.key === 'w' || e.key === 'W') {
                playerPaddle.moveUp = false;
            } else if (e.key === 'ArrowDown' || e.key === 's' || e.key === 'S') {
                playerPaddle.moveDown = false;
            }
        });

        // Prevent scrolling on touch devices when touching the canvas
        document.body.addEventListener("touchstart", function (e) {
            if (e.target == canvas) {
                e.preventDefault();
            }
        }, { passive: false });
        document.body.addEventListener("touchend", function (e) {
            if (e.target == canvas) {
                e.preventDefault();
            }
        }, { passive: false });
        document.body.addEventListener("touchmove", function (e) {
            if (e.target == canvas) {
                e.preventDefault();
            }
        }, { passive: false });

        function animate() {
            if (!gameRunning) return;
            ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);

            // Draw Top and Bottom Borders
            ctx.fillStyle = '#ecf0f1';
            ctx.fillRect(0, 0, GAME_WIDTH, 10); // Top border
            ctx.fillRect(0, GAME_HEIGHT - 10, GAME_WIDTH, 10); // Bottom border

            playerPaddle.draw();
            computerPaddle.draw();
            ball.draw();

            ball.update(playerPaddle, computerPaddle);
            playerPaddle.update();
            computerPaddle.update(ball);

            requestAnimationFrame(animate);
        }

        startButton.addEventListener('click', startGame);
    </script>
</body>
</html>
